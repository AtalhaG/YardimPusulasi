filter {
  if [message] =~ /^filterlog:/ {
    grok {
      match => { "message" => "filterlog: %{INT:filterlog_level},+%{INT:filterlog_id},%{WORD:interface},%{WORD:action},%{WORD:direction},%{INT:ip_version},%{DATA:ip_flags},%{INT:ttl},%{INT:tos},%{INT:id},%{WORD:ip_flags2},%{INT:proto_id},%{WORD:protocol},%{INT:length},%{IP:src_ip},%{IP:dst_ip},%{INT:src_port},%{INT:dst_port},%{INT:tcp_flags},%{WORD:tcp_flag_str},%{INT:seq},%{INT:ack},%{INT:window},%{DATA:tcp_options}" }
      tag_on_failure => ["_filterlog_parse_fail"]
    }
    mutate {
      add_field => { "source_type" => "filterlog" }
      remove_field => ["message"]
    }
  } else if [type] == "syslog" {
    # AŞAMA 1: Standart syslog ön ekini ayrıştır.
    grok {
      match => { "message" => "<%{INT:syslog_pri}>%{INT:syslog_version} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:process_name} %{INT:process_id} - - %{GREEDYDATA:main_message}" }
      tag_on_failure => ["_prefix_parse_fail"]
    }

    # AŞAMA 2: Sadece 'dhcpd' loglarının içeriğini işle.
    if [process_name] == "dhcpd" {
      mutate {
        strip => ["main_message"]
      }
      if "DHCPREQUEST" in [main_message] {
        grok {
          match => { "main_message" => [
            "DHCPREQUEST for %{IP:requested_ip} from %{MAC:mac_address} \(%{DATA:client_name}\) via %{WORD:interface}",
            "DHCPREQUEST for %{IP:requested_ip} from %{MAC:mac_address} via %{WORD:interface}"
          ]}
          remove_field => ["main_message"]
          tag_on_failure => ["_dhcprequest_detail_fail"]
        }
      } else if "DHCPACK" in [main_message] {
        grok {
          match => { "main_message" => [
            "DHCPACK on %{IP:ack_ip} to %{MAC:mac_address} \(%{DATA:client_name}\) via %{WORD:interface}",
            "DHCPACK on %{IP:ack_ip} to %{MAC:mac_address} via %{WORD:interface}"
          ]}
          remove_field => ["main_message"]
          tag_on_failure => ["_dhcpack_detail_fail"]
        }
      } else if "DHCPOFFER" in [main_message] {
        grok {
          match => { "main_message" => [
            "DHCPOFFER on %{IP:offered_ip} to %{MAC:mac_address} \(%{DATA:client_name}\) via %{WORD:interface}",
            "DHCPOFFER on %{IP:offered_ip} to %{MAC:mac_address} via %{WORD:interface}"
          ]}
          remove_field => ["main_message"]
          tag_on_failure => ["_dhcpoffer_detail_fail"]
        }
      } else if "reuse_lease" in [main_message] {
        grok {
          match => { "main_message" => "reuse_lease: lease age %{NUMBER:lease_age_secs:int} \(secs\) %{DATA:lease_details} for %{IP:lease_ip}" }
          remove_field => ["main_message"]
          tag_on_failure => ["_reuselease_detail_fail"]
        }
      }
    }
    if "_prefix_parse_fail" not in [tags]
        and "_dhcpack_detail_fail" not in [tags]
        and "_dhcprequest_detail_fail" not in [tags]
        and "_dhcpoffer_detail_fail" not in [tags]
        and "_reuselease_detail_fail" not in [tags] {
      date {
        match => ["timestamp", "ISO8601"]
        target => "@timestamp"
        remove_field => ["timestamp"]
      }
      mutate {
        add_field => { "source_type" => "syslog" }
        remove_field => ["message"]
      }
    }
  }
} 